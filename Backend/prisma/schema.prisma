// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                   @id @default(uuid())
  firstName                       String
  lastName                        String
  username                        String                   @unique
  password                        String
  email                           String                   @unique
  spotifyAccount                  SpotifyAccount?
  initiatedFriendships            Friendship[]             @relation("FriendshipInitiator")
  receivedFriendships             Friendship[]             @relation("FriendshipReceiver")
  confirmedFriendshipsInitiated   ConfirmedFriendship[]    @relation("ConfirmedFriendshipUser1")
  confirmedFriendshipsReceived    ConfirmedFriendship[]    @relation("ConfirmedFriendshipUser2")
  topSongs                        TopSongs[]
  accessToken                     String?
  refreshToken                    String?
  userPosts                       Post[]                   @relation("user")
  friendPosts                     Post[]                   @relation("friend")
  visitedProfiles                 ProfileVisits[]          @relation("visitorUser")
  profileVisitors                 ProfileVisits[]          @relation("visitedUser")
  LikedSongs                      LikedSongs[]
}

model SpotifyAccount {
  id           String @id @default(uuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique
  spotifyId    String
  accessToken  String
  refreshToken String
  spotifyUrl   String
}

model Friendship {
  id                      String                @id @default(uuid())
  initiator               User                  @relation("FriendshipInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId             String
  receiver                User                  @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId              String
  initiatorConfirmed      Boolean               @default(false) // Confirmation from the initiator
  receiverConfirmed       Boolean               @default(false) // Confirmation from the receiver
  confirmedFriendship     ConfirmedFriendship?
  addedAt                 DateTime              @default(now())
}

 model ConfirmedFriendship {
  id            String      @id @default(uuid())
  Friendship    Friendship  @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  friendshipId  String      @unique
  user1         User        @relation("ConfirmedFriendshipUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id       String
  user2         User        @relation("ConfirmedFriendshipUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id       String
 }

model TopSongs {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tracks    Tracks[]
  createdAt DateTime  @default(now())
  @@index([createdAt])
}

model Tracks {
  id              String          @id @default(uuid())
  track           String
  spotifyId       String          @unique
  artist          String[]
  albumCover      String
  TopSongs        TopSongs[]
  Posts           Post[]
  LikedSongs      LikedSongs[]
}

model Post {
  id        String    @id @default(uuid())
  user      User      @relation("user", fields: [userId], references: [id])
  userId    String
  friend    User      @relation("friend", fields: [friendId], references: [id])
  friendId  String
  text      String
  track     Tracks?   @relation(fields: [trackId], references: [id])
  trackId   String?
  likes     Int        @default(0)
  createdAt DateTime @default(now())
}

model ProfileVisits {
  id            String    @id @default(uuid())
  visitor       User      @relation("visitorUser", fields: [visitorId], references: [id])
  visitorId     String
  visited       User      @relation("visitedUser", fields: [visitedId], references: [id])
  visitedId     String
  visitedCount  Int       @default(0)
  lastVisited   DateTime  @updatedAt
}

model LikedSongs {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  track     Tracks     @relation(fields: [trackId], references: [id])
  trackId   String
  likedAt   DateTime   @default(now())
}
